<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on null.pt</title><link>https://null.pt/posts/</link><description>Recent content in Posts on null.pt</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Nov 2012 01:44:00 +0100</lastBuildDate><atom:link href="https://null.pt/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating Java with Bash pipes</title><link>https://null.pt/posts/integrating-java-with-bash-pipes/</link><pubDate>Fri, 23 Nov 2012 01:44:00 +0100</pubDate><guid>https://null.pt/posts/integrating-java-with-bash-pipes/</guid><description>&lt;p>For testing purpose we will try to develop a simple Java class to replicate the GNU &lt;code>grep&lt;/code> behavior.
Lets take the following &lt;code>grep&lt;/code> as the test baseline.&lt;/p></description></item><item><title>How to generate RPMs from R modules</title><link>https://null.pt/posts/how-to-generate-rpms-from-r-modules/</link><pubDate>Wed, 03 Oct 2012 23:56:00 +0100</pubDate><guid>https://null.pt/posts/how-to-generate-rpms-from-r-modules/</guid><description>&lt;p>Today I was setting up a CentOS server with some packages including &lt;a
href="http://www.r-project.org/"
target="_blank"
rel="noopener"
>
R
&lt;/a> and a couple of R modules.
R is generally available from third-party repositories like &lt;a
href="http://fedoraproject.org/wiki/EPEL"
target="_blank"
rel="noopener"
>
EPEL
&lt;/a> but its modules must be compiled locally, which requires a lot of dependencies like R-devel and GCC.&lt;/p></description></item><item><title>9ticks - The Web as a Stream</title><link>https://null.pt/posts/9ticks-the-web-as-a-stream/</link><pubDate>Wed, 03 Oct 2012 10:58:00 +0100</pubDate><guid>https://null.pt/posts/9ticks-the-web-as-a-stream/</guid><description>&lt;p>Almost three years have passed and I keep reminiscing my computer science internship.&lt;/p></description></item><item><title>Plotting analog readings from Arduino using Matplotlib</title><link>https://null.pt/posts/plotting-analog-readings-from-arduino-using-matplotlib/</link><pubDate>Thu, 10 Mar 2011 23:45:00 +0100</pubDate><guid>https://null.pt/posts/plotting-analog-readings-from-arduino-using-matplotlib/</guid><description>&lt;p>Uses an LDR (Light Dependent Resistor) to sample readings through the serial port every half second. A Python script reads from the serial port and plots the light intensity using Matplotlib.&lt;/p></description></item></channel></rss>